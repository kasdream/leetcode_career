239. Sliding Window Maximum
Hard

Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Note:
You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?

该题是滑动窗口取其中的最大值，要实现下列几个功能：

1、窗口是滑动的，也就是说，要实现前端不断出去，后端不断进来。注意前端出去是看数组的位置的，一旦该数值的位置已经被略过了，就要出去。
2、最大值的问题，说明要维护一个单调递减的栈。即是如果来的值大于后端的值，则要让后端的值出来。

所以前端要出去 后端要进来又要出去，则可用双端队列解决问题
因为要记住队伍的位置，所以入栈的不需要是nums的具体数值，而是nums的序号，每次大小比较时使用nums[id]解决问题
出窗口时需要 id <= i - k 比如开头为0 k=3 循环到第四个值 i = 3  3-3=0 所以出去的是3

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> res;
        if (nums.empty()) {
            return res;}
        for (int i = 0; i < k; i++){
            if (dq.empty()) dq.push_back(i);
            else {
                while (!dq.empty() && nums[i] > nums[dq.back()]){
                    dq.pop_back();
                }
                dq.push_back(i);
            }
        }
        res.push_back(nums[dq.front()]);
        for (int i = k; i < nums.size(); i++){
            while (!dq.empty() && nums[i] > nums[dq.back()]){
                dq.pop_back();
            }
            while (!dq.empty() && dq.front() <= i - k){
                dq.pop_front();
            }
            dq.push_back(i);
            res.push_back(nums[dq.front()]);
        }
        return res;
    }
};
