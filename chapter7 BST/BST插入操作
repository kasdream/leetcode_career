701. Insert into a Binary Search Tree
Medium

Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.

Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.

For example, 

Given the tree:
        4
       / \
      2   7
     / \
    1   3
And the value to insert: 5

You can return this binary search tree:

         4
       /   \
      2     7
     / \   /
    1   3 5

This tree is also valid:

         5
       /   \
      2     7
     / \   
    1   3
         \
          4

插入二叉查找树的时候，先如果空节点，则让这个节点成为VAL节点，也就是root = new TreeNode(val);
然后可以先思考能不能用递归的方式解决问题，我们插入新节点，可以变作是对左子树插入新节点，或者是右子树插入新节点，所以是可行的
递归的终点就是去到一个为NULL子节点，和根节点情况一样
遍历的时候， 先 root->left = function(root->left) 再return root 
遍历时相当于对于每个子节点，都使用这样的函数，完成后又返回上一层节点

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if (root == NULL){
            root = new TreeNode(val);
            return root;
        }
        if (val < root->val){
            root -> left = insertIntoBST(root->left,val);
        }
        if (val > root->val){
            root -> right = insertIntoBST(root->right,val);
        }
        return root;
    }
};
