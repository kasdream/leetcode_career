456. 132 Pattern
Medium

Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.

Note: n will be less than 15,000.

Example 1:

Input: [1, 2, 3, 4]

Output: False

Explanation: There is no 132 pattern in the sequence.

Example 2:

Input: [3, 1, 4, 2]

Output: True

Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

Example 3:

Input: [-1, 3, 2, 0]

Output: True

Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


从正序来看，题目相当于求在两个数中夹着的一个数，即a2夹在a1,a3中间
但从倒序来看，只要a1 比 a2，a3小就行（倒序排序 for(int i = nums.size()-1; i >=0; i--)） 特别注意是 i>=0
重点是要保证a2 a3的位置关系不能变，而且a2并不一定是最末尾的，a3a2的值也会更新
这时一般用栈的方式解决问题，如果小于a2,则成立，如果大于a2小于a3，则入栈排队，作为候选的a2替补值（除了a3以外最大值，也就是要维护单调递减的栈）。
然后当这个栈每次出数据时，就将a2的值标记为出栈的值就好。
切记while中要pop时，判断！nums.empty（）一定要放在大于小于的判断前面，否则会报错。

class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        stack<int> rise;
        int a2 = INT_MIN;
        for (int i = nums.size()-1; i > 0; i-- ){
            if (nums[i] < a2) return true;
            while (rise.size() && nums[i] > rise.top()){
                a2 = rise.top();
                rise.pop();
            }
            rise.push(nums[i]);
        }
        return false;
    }
};
