402. Remove K Digits
Medium

Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:

    The length of num is less than 10002 and will be ≥ k.
    The given num does not contain any leading zero.

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.

因为是最大最小值，所以栈前方的值越大或越小越好，后面的不用管，而且操作次数被k限定
去掉值与维护一个单调栈比较像，关键是维护过程中每次Pop出一个值，k值需要减1，如果k值减完了，则不能继续pop（）
每次pop切记要检查栈是否为空，否则会出错
如果全部遍历后还有多余的k值，则从栈尾部开始pop去k的剩余值
由于最小化前头可能为0，所以在Push过程中，若栈为空时，就不push 0进去
由于return是string，直接建立string省事，而不用stack

class Solution {
public:
    string removeKdigits(string num, int k) {
        string nums;
        for (int i = 0; i < num.size(); i++){
            
                while (num[i] < nums.back() && k > 0 && !nums.empty()){
                    nums.pop_back();
                    k --;
                }
                if (!nums.empty() || num[i] != '0')
                nums.push_back(num[i]);
        }
        while (k > 0 && nums.size()){
            nums.pop_back();
            k --;
        }        
        return nums.empty() ? "0" : nums;
    }
};
