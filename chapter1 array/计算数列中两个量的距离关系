849. Maximize Distance to Closest Person
Easy

In a row of seats, 1 represents a person sitting in that seat, and 0 represents that the seat is empty. 

There is at least one empty seat, and at least one person sitting.

Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. 

Return that maximum distance to closest person.

Example 1:

Input: [1,0,0,0,1,0,1]
Output: 2
Explanation: 
If Alex sits in the second open seat (seats[2]), then the closest person has distance 2.
If Alex sits in any other open seat, the closest person has distance 1.
Thus, the maximum distance to the closest person is 2.

Example 2:

Input: [1,0,0,0]
Output: 3
Explanation: 
If Alex sits in the last seat, the closest person is 3 seats away.
This is the maximum distance possible, so the answer is 3.

Note:

    1 <= seats.length <= 20000
    seats contains only 0s or 1s, at least one 0, and at least one 1.


像这种两个量之间距离的题目，要设start和end两个位置指针，在遍历过程中不断注意更新start和end以计算其中的值
特别注意头部 00001  和尾部  10000 以及头部100这种情况，其中0001 和 1000 触发时间相似，部分指针无法更新，需要新变量first==0？去判断是否第一次

class Solution {
public:
    int maxDistToClosest(vector<int>& seats) {
        if (seats.size() == 0) return 0;
        int beg_idx = 0;
        int end_idx = 0;
        int first = 0;
        int temp = 0;
        int current_max = 0;
        for (int i = 0; i < seats.size(); i++){            
            if (seats[i] == 1){
                if(first == 0){
                    temp = i * 2;
                    if (temp > current_max){
                        current_max = temp;
                    }                    
                    beg_idx = i;
                    end_idx = i;
                    first += 1;
                }
                else{
                    end_idx = i;
                    temp = end_idx - beg_idx;
                    if (temp > current_max){
                        current_max = temp;
                    }
                    beg_idx = i;
                }
            }
            if (i == seats.size() - 1){
                end_idx = i;
                temp = (end_idx - beg_idx) * 2;
                if (temp > current_max){
                    current_max = temp;
                }
            } 
        }
        return current_max/2;
    }
};
