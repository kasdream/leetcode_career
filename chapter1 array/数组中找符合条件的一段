697. Degree of an Array
Easy

Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:

Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.

Example 2:

Input: [1,2,2,3,1,4,2]
Output: 6

Note:
nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.

NOTE中的数值大于10000，说明最好一次遍历就要完成。
这里要观察出现次数最多的数字首尾数组
这种时候得有一个结构保存数字第一次出现的位置和出现的次数，而且还要反复从中找出数值
哈希表正适合做这件事情，而且默认哈希表的值均为0，无需初始化
还需要一个值保存目前最大的出现次数，如果大于，则更新长度，如果等于，则比较长度再更新长度
class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        int size = nums.size();
        int res = INT_MAX;
        int degree = 0;

        unordered_map<int, int> m, startIdx;

        for (int i = 0; i < size; i++) {
            m[nums[i]]++; // 次数更新
            if (m[nums[i]] == 1) {
                // 第一次出现,建立起始位置和数字的映射
                startIdx[nums[i]] = i;
            }
            if(m[nums[i]]==degree) {
                // 等于degree,则得到了最远的距离
                // 则需要计算最小的长度
                res = min(res,i - startIdx[nums[i]] + 1);
            }
            else if(m[nums[i]]>degree) {
                // 出现次数更多.则需要更新 res成为最高次数对应的长度;
                res = i - startIdx[nums[i]] + 1;
                degree = m[nums[i]];
            }
        }
        return res;
    }
};
