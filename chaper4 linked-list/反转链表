206. Reverse Linked List
Easy

Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL

反转能用遍历做也能用循环做
用循环做需要三个node，一个保存过去的值，作为新链表原来的表头，一个保存中间的值，作为从旧链表表头转换为新链表的表头，一个在就链表中作为前项遍历

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (head == NULL) return NULL;
        ListNode *p1 = head, *p2 = head->next, *temp;         
        p1->next = NULL;
        while (p2 != NULL){
            temp = p1;
            p1 = p2;
            p2 = p2->next;
            p1->next = temp;
        }
        return p1;
    }
};

递归是反向思考问题
用递归方法，先思考最后条件，如果最后一个时，那就递归末尾值作为新链表的表头
如果不是最后一个，那新建一个新链表的表头为上一次的表头（其实也就是就链表最后一个值）
然后更新新链表，可以观察室旧链表的首位不断换到新链表的末尾，所以让head->next（即是就表头的下一位）
head->next 再->next说明让箭头相反 4的时候，3为head,3-》next->next为5（新表末尾的值，下一个为4）
最后head->next为空
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (head == NULL || head->next == NULL) return head;
        
        ListNode *newhead = reverseList(head->next);
        head->next->next = head;
        head->next = NULL;
        return newhead;
    }
};
然后再把head->next设为NULL,毕竟是末尾
