105. Construct Binary Tree from Preorder and Inorder Traversal
Medium

Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]

Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7

前序遍历或后续遍历与中序遍历可以合成新树，但只有前序加后序则不行
从preorder和inorder可以看出，要遍历的是左子树和右子树
因为要从两个vector中形成新的TreeNode,故迭代时要新建一个节点并确立其左右子树的位置（在Vector点上分布）
故需要在每个vector上有两个指针记录这次左右子树的始末位置
由于前项遍历的第一项肯定是目前根节点，直接初始化TreeNode *subHead = new TreeNode(preorder[prestart]),直接与该位置绑定
树节点在inorder中序编列中时，其左边为左子树，右边为右子树
从inorder的左子树大小能反推preorder的左子树末尾位置，也就是prestart + head - instart

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        TreeNode* head = buildSubTree (preorder,inorder,0,preorder.size()-1,0,inorder.size()-1);
        return head;
    }
    TreeNode *buildSubTree(vector<int> &preorder, vector<int> &inorder,int prestart,int preend, int instart,int inend){
        if (prestart > preend || instart >inend) return NULL;
        TreeNode* subhead = new TreeNode(preorder[prestart]);
        int head_num = 0;
        for (int i = instart; i <= inend; i++ ){
            if (inorder[i] == preorder[prestart]){
                head_num = i;
                break;
            }                
        }
        subhead->left = buildSubTree(preorder,inorder,prestart+1,prestart + head_num - instart,instart,head_num-1);
        subhead->right = buildSubTree(preorder,inorder,prestart + head_num - instart + 1,preend,head_num+1,inend);
        return subhead;
    }  
};
