200. Number of Islands
Medium

Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:

Input:
11110
11010
11000
00000

Output: 1

Example 2:

Input:
11000
11000
00100
00011

Output: 3

孤立岛屿数量，可以转化为一个dfs问题，即如果我读了一个新的岛屿，那该点和和它相邻的点全都变0，遍历整个grid然后计算出现1的次数
在获取岛屿边长的过程中，用int m = grid.size()，int n = grid[0].size();
关键的是在检测上下左右边是否越界的问题时， 上界是 i < 0而不是i-1<0，因为i = 0 才是第一条边

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int res = 0;
        if (grid.empty() || grid[0].empty()){
            return res;
        }
        int m = grid.size();
        int n = grid[0].size();
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (grid[i][j] == '1'){                    
                    dfs(grid, m, n, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    void dfs (vector<vector<char>>& grid, int m, int n, int i, int j){
        grid[i][j] = '0';
        if (i>0 && grid[i-1][j] == '1') dfs(grid,m,n,i-1,j);
        if (i+1<m && grid[i+1][j] == '1') dfs(grid,m,n,i+1,j);
        if (j>0 && grid[i][j-1] == '1') dfs(grid,m,n,i,j-1);
        if (j+1<n && grid[i][j+1] == '1') dfs(grid,m,n,i,j+1);
    }
};
